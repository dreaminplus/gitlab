# frozen_string_literal: true

module API
  class VulnerabilityExports < Grape::API
    include ::API::Helpers::VulnerabilitiesHooks
    include ::Gitlab::Utils::StrongMemoize

    helpers do
      def vulnerability_export
        strong_memoize(:vulnerability_export) do
          user_project.vulnerability_exports.find(params[:export_id])
        end
      end
    end

    before do
      authenticate!
    end

    params do
      requires :id, type: String, desc: 'The ID of a project'
    end
    resource :projects, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
      params do
        optional :export_format, type: String, desc: 'The format of export to be generated',
                 default: ::Vulnerabilities::Export.formats.each_key.first,
                 values: ::Vulnerabilities::Export.formats.keys
      end
      desc 'Generate an export of project vulnerability findings' do
        success EE::API::Entities::VulnerabilityExport
      end
      post ':id/vulnerability_exports' do
        authorize! :read_vulnerability, user_project

        vulnerability_export = ::VulnerabilityExports::CreateService.new(
          user_project, current_user, format: params[:export_format]
        ).execute

        if vulnerability_export.persisted?
          present vulnerability_export, with: EE::API::Entities::VulnerabilityExport
        else
          render_validation_error!(vulnerability_export)
        end
      end

      desc 'Get single project vulnerability export' do
        success EE::API::Entities::VulnerabilityExport
      end
      get ':id/vulnerability_exports/:export_id' do
        authorize! :read_vulnerability, user_project

        present vulnerability_export,
                with: EE::API::Entities::VulnerabilityExport
      end

      desc 'Download single project vulnerability export'
      get ':id/vulnerability_exports/:export_id/download' do
        authorize! :read_vulnerability, user_project

        if vulnerability_export.finished?
          present_carrierwave_file!(vulnerability_export.file)
        elsif vulnerability_export.failed?
          not_found!('Vulnerability Export')
        else
          ::Gitlab::PollingInterval.set_api_header(self, interval: 5_000)
          render_api_error!('Job to generate Vulnerability Export is in progress', 202)
        end
      end
    end
  end
end
