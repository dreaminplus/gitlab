# frozen_string_literal: true

require 'spec_helper'

describe 'Query.project(fullPath).vulnerabilitySeveritiesCount' do
  let_it_be(:project) { create(:project) }
  let_it_be(:user) { create(:user) }
  let_it_be(:confirmed_vulnerability) { create(:vulnerability, :confirmed, :high, project: project) }
  let_it_be(:detected_vulnerability) { create(:vulnerability, :detected, :high, project: project) }
  let_it_be(:resolved_vulnerability) { create(:vulnerability, :resolved, :high, project: project) }
  let_it_be(:dismissed_vulnerabilities) { create(:vulnerability, :dismissed, :high, project: project) }

  let_it_be(:query) do
    %(
      query {
        project(fullPath:"#{project.full_path}") {
          vulnerabilitySeveritiesCount {
            high
          }
        }
      }
    )
  end

  before do
    project.add_developer(user)
  end

  subject { GitlabSchema.execute(query, context: { current_user: user }).as_json }

  context "when the current user can read the project's vulnerabilities" do
    before do
      stub_licensed_features(security_dashboard: true)
    end

    it "returns counts for each severity of the project's detected or confirmed vulnerabilities" do
      high_count = subject.dig('data', 'project', 'vulnerabilitySeveritiesCount', 'high')

      expect(high_count).to be(2)
    end
  end

  context "when the current user cannot read the project's vulnerabilities" do
    before do
      stub_licensed_features(security_dashboard: false)
    end

    it 'returns nil' do
      count = subject.dig('data', 'project', 'vulnerabilitySeveritiesCount')

      expect(count).to be_nil
    end
  end
end
