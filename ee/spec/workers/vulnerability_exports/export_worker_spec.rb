# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExports::ExportWorker, type: :worker do
  describe '#perform' do
    let_it_be(:project) { create(:project, :with_vulnerabilities) }
    let!(:vulnerability_export) { create(:vulnerability_export, :created, :csv, project: project) }

    let(:worker) { described_class.new }

    before do
      allow(VulnerabilityExports::ExportDeletionWorker).to receive(:perform_in)
      allow(Sidekiq.logger).to receive(:error)
    end

    context 'when vulnerability export does not exist' do
      subject { worker.perform(project.id, 9999) }

      it 'does not raise any error' do
        expect { subject }.not_to raise_error
      end
    end

    context 'when vulnerability export exists' do
      include_examples 'an idempotent worker' do
        let(:job_args) { [project.id, vulnerability_export.id] }

        context 'when export can be performed successfully' do
          it 'creates new export file' do
            subject
            vulnerability_export.reload
            expect(vulnerability_export).to be_finished
            expect(vulnerability_export.file.read).to include('Scanner Type,Scanner Name,Status,Vulnerability,Details,Additional Info,Severity,CVE')
          end

          it 'schedules job to delete export in 1 hour' do
            expect(VulnerabilityExports::ExportDeletionWorker).to receive(:perform_in).with(1.hour, project.id, vulnerability_export.id)
            subject
          end
        end
      end

      context 'when export fails' do
        subject { worker.perform(project.id, vulnerability_export.id) }

        before do
          allow_any_instance_of(Vulnerabilities::Export).to receive(:finish!).and_raise(ActiveRecord::RecordInvalid)
        end

        it 'does not raise exception' do
          expect { subject }.not_to raise_error
        end

        it 'logs error' do
          expect(Sidekiq.logger).to receive(:error).with(class: described_class.name, message: anything)
          subject
        end

        it 'sets status of the export to failed' do
          expect_any_instance_of(Vulnerabilities::Export).to receive(:failed!)
          subject
        end

        it 'schedules job to delete export in 1 hour' do
          expect(VulnerabilityExports::ExportDeletionWorker).to receive(:perform_in).with(1.hour, project.id, vulnerability_export.id)
          subject
        end
      end
    end
  end
end
