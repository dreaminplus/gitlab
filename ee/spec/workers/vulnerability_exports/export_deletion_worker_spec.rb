# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExports::ExportDeletionWorker, type: :worker do
  describe '#perform' do
    let!(:project) { create(:project) }
    let!(:vulnerability_export) { create(:vulnerability_export, :finished, :csv, :with_csv_file, project: project) }

    context 'when vulnerability export does not exist' do
      subject { perform_multiple([project.id, 9999]) }

      it 'does not destroy any Vulnerability::Export' do
        expect { subject }.not_to change { Vulnerabilities::Export.count }
      end
    end

    context 'when vulnerability export exists' do
      include_examples 'an idempotent worker' do
        let(:job_args) { [project.id, vulnerability_export.id] }

        context 'when destroy can be performed successfully' do
          it 'destroys vulnerability export' do
            subject
            expect { vulnerability_export.reload }.to raise_error(ActiveRecord::RecordNotFound)
          end
        end

        context 'when destroy fails' do
          before do
            allow(vulnerability_export).to receive(:destroy!).and_raise(ActiveRecord::RecordNotFound)
          end

          it 'does not raise exception' do
            expect { subject }.not_to raise_error
          end

          it 'logs error' do
            expect_any_instance_of(Gitlab::SidekiqLogging::ClientLogger).to receive(:error).with(class: described_class.name, message: anything)
            subject
          end
        end
      end
    end
  end
end
