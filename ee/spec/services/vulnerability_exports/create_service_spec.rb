# frozen_string_literal: true

require 'spec_helper'

describe VulnerabilityExports::CreateService do
  include AccessMatchersGeneric

  before do
    stub_licensed_features(security_dashboard: true)
  end

  let_it_be(:user) { create(:user, :auditor) }
  let(:group) { create(:group) }
  let(:project) { create(:project, :public, group: group) }
  let(:format) { 'csv' }

  subject { described_class.new(project, user, format: format).execute }

  describe '#execute' do
    context 'when security dashboard feature is disabled' do
      before do
        stub_licensed_features(security_dashboard: false)
      end

      it 'raises an "access denied" error' do
        expect { subject }.to raise_error(Gitlab::Access::AccessDeniedError)
      end
    end

    context 'when security dashboard feature is enabled' do
      it 'does not raise an "access denied" error' do
        expect { subject }.not_to raise_error(Gitlab::Access::AccessDeniedError)
      end

      it 'creates new Vulnerabilities::Export' do
        expect { subject }.to change { Vulnerabilities::Export.count }.from(0).to(1)
      end

      it 'schedules ::VulnerabilityExports::ExportWorker background job' do
        expect(::VulnerabilityExports::ExportWorker).to receive(:perform_async).with(project.id, anything)
        subject
      end

      it 'returns new Vulnerabilities::Export with project and format assigned' do
        expect(subject).to have_attributes(project_id: project.id, format: format)
      end
    end
  end
end
