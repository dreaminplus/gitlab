# frozen_string_literal: true

require 'spec_helper'

describe Resolvers::VulnerabilityGradesResolver do
  include GraphqlHelpers

  describe '#resolve' do
    let(:letter_grade_a) { instance_double(Vulnerabilities::LetterGrade, letter: 'a') }
    let(:letter_grade_b) { instance_double(Vulnerabilities::LetterGrade, letter: 'b') }
    let(:letter_grade_c) { instance_double(Vulnerabilities::LetterGrade, letter: 'c') }
    let(:letter_grade_d) { instance_double(Vulnerabilities::LetterGrade, letter: 'd') }
    let(:letter_grade_f) { instance_double(Vulnerabilities::LetterGrade, letter: 'f') }
    let(:vulnerability_letter_grades) { [letter_grade_a, letter_grade_b, letter_grade_c, letter_grade_d, letter_grade_f] }
    let(:expected_letter_grades) do
      {
        'a' => letter_grade_a,
        'b' => letter_grade_b,
        'c' => letter_grade_c,
        'd' => letter_grade_d,
        'f' => letter_grade_f
      }
    end

    subject { resolve(described_class, obj: vulnerable) }

    context 'when the vulnerable is a Group' do
      let(:vulnerable) { instance_double(Group, vulnerability_letter_grades: vulnerability_letter_grades) }

      it { is_expected.to eql(expected_letter_grades) }
    end

    context 'when the vulnerability is an InstanceSecurityDashboard' do
      let(:vulnerable) { instance_double(InstanceSecurityDashboard, vulnerability_letter_grades: vulnerability_letter_grades) }

      it { is_expected.to eql(expected_letter_grades) }
    end
  end
end
