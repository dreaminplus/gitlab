# frozen_string_literal: true

module VulnerabilityExports
  class ExportWorker
    include ApplicationWorker

    feature_category :vulnerability_management
    worker_resource_boundary :cpu

    def perform(project_id, vulnerability_export_id)
      idempotent!

      project = Project.find(project_id)
      vulnerability_export = project.vulnerability_exports.find(vulnerability_export_id)

      return if project.blank? || vulnerability_export.blank? || vulnerability_export.finished?

      vulnerability_export.start!

      vulnerabilities = Security::VulnerabilitiesFinder.new(project).execute
      file_data = generate_file_data(vulnerability_export.format, vulnerabilities)
      filename = "#{project.full_path.parameterize}_vulnerabilities_#{Time.now.utc.strftime('%FT%H%M')}"

      vulnerability_export.update(file: generate_tempfile(filename, file_data, vulnerability_export.format))
      vulnerability_export.finish!
    end

    private

    def generate_tempfile(filename, file_data, format)
      Tempfile.open([filename, ".#{format}"]) do |file|
        file.write(file_data)
        file
      end
    end

    def generate_file_data(format, vulnerabilities)
      case format
      when 'csv'
        VulnerabilityExports::ExportCsvService.new(vulnerabilities).csv_data
      end
    end
  end
end
